// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userDetails   UserDetails?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  PLAYER
  ORGANIZATION
}

model UserDetails {
  id               String            @id @default(cuid())
  role             Role
  username         String?           @unique
  about            String?
  user             User              @relation(fields: [id], references: [id], onDelete: Cascade)
  userId           String            @unique
  adminData        AdminData?
  playerData       PlayerData?
  organizationData OrganizationData?

  @@index([id])
}

model AdminData {
  id            String      @id @default(cuid())
  userDetails   UserDetails @relation(fields: [userDetailsId], references: [id], onDelete: Cascade)
  userDetailsId String      @unique
}

model PlayerData {
  id                 String      @id @default(cuid())
  enrolledChallenges Challenge[]
  userDetails        UserDetails @relation(fields: [userDetailsId], references: [id], onDelete: Cascade)
  userDetailsId      String      @unique
}

model OrganizationData {
  id                String      @id @default(cuid())
  name              String
  image             String
  website           String
  phone             String?
  address           String?
  city              String?
  state             String?
  zip               String?
  country           String
  userDetails       UserDetails @relation(fields: [userDetailsId], references: [id], onDelete: Cascade)
  userDetailsId     String      @unique
  createdChallenges Challenge[]
}

// TODO add more entries
enum ChallengeTag {
  FITNESS
  RECYCLING
  ENVIRONMENT_CLEANING
  MINDFULNESS
  NUTRITION
  WELLNESS
  MOBILITY
  ENERGY_CONSERVATION
  COMMUNITY_INVOVEMENT
  OTHER
}

// TODO: add challenge rewards functionality
model Challenge {
  id                 String              @id @default(cuid())
  name               String
  description        String              @db.Text
  image              String?
  startDate          DateTime
  endDate            DateTime
  location           String?
  isDraft            Boolean             @default(true)
  organizationData   OrganizationData    @relation(fields: [organizationDataId], references: [id], onDelete: Cascade)
  organizationDataId String
  ChallengeCategory  ChallengeCategory[]
  enrolledPlayers    PlayerData[]

  @@index([organizationDataId])
}

model ChallengeCategory {
  id         String       @id @default(cuid())
  tag        ChallengeTag
  challenges Challenge[]
}
