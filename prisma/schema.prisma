// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  userDetails   UserDetails?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  ADMIN
  PLAYER
  ORGANIZATION
}

// User data models
model UserDetails {
  id               String            @id @default(cuid())
  role             Role
  username         String?           @unique
  about            String?
  user             User              @relation(fields: [id], references: [id], onDelete: Cascade)
  userId           String            @unique
  adminData        AdminData?
  playerData       PlayerData?
  organizationData OrganizationData?

  @@index([id])
}

model AdminData {
  id            String      @id @default(cuid())
  userDetails   UserDetails @relation(fields: [userDetailsId], references: [id], onDelete: Cascade)
  userDetailsId String      @unique
}

model PlayerData {
  id         String @id @default(cuid())
  experience Int    @default(0)

  enrolledChallenges Challenge[]
  userDetails        UserDetails     @relation(fields: [userDetailsId], references: [id], onDelete: Cascade)
  userDetailsId      String          @unique
  Participation      Participation[]

  createdAt DateTime @default(now())
}

enum OrganizationAcceptanceState {
  UNSUBMITTED
  PENDING
  ACCEPTED
  REJECTED
}

model OrganizationData {
  id               String                      @id @default(cuid())
  name             String                      @unique
  image            String
  website          String
  phone            String?
  address          String?
  city             String?
  state            String?
  zip              String?
  country          String
  approvalState    OrganizationAcceptanceState @default(UNSUBMITTED)
  rejectionMessage String?

  userDetails       UserDetails @relation(fields: [userDetailsId], references: [id], onDelete: Cascade)
  userDetailsId     String      @unique
  createdChallenges Challenge[]
  createdAt         DateTime    @default(now())
}

// Main entities
enum ChallengeTag {
  FITNESS
  RECYCLING
  ENVIRONMENT_CLEANING
  NUTRITION
  MOBILITY
  WELLNESS
  COMMUNITY_INVOLVEMENT
  OTHER
}

enum ChallengeDifficulty {
  EASY
  MEDIUM
  HARD
}

model Challenge {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  image       String?
  startDate   DateTime
  endDate     DateTime
  location    String?
  isDraft     Boolean  @default(true)

  organizationData    OrganizationData    @relation(fields: [organizationDataId], references: [id], onDelete: Cascade)
  organizationDataId  String
  challengeCategories ChallengeCategory[]
  enrolledPlayers     PlayerData[]
  participations      Participation[]
  difficulty          ChallengeDifficulty @default(EASY)

  createdAt DateTime @default(now())

  @@index([organizationDataId])
}

model ChallengeCategory {
  id          String       @id @default(cuid())
  tag         ChallengeTag
  challenges  Challenge    @relation(fields: [challengeId], references: [id])
  challengeId String

  @@unique([tag, challengeId])
  @@index([challengeId])
}

model Participation {
  id           String     @id @default(cuid())
  playerData   PlayerData @relation(fields: [playerDataId], references: [id], onDelete: Cascade)
  playerDataId String
  challenge    Challenge  @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  challengeId  String
  isValid      Boolean    @default(true) // invalid if an administrator detects an irregularity
  date         DateTime   @default(now())
  comments     String?    @db.Text
  proofUrl     String?

  @@index([challengeId])
  @@index([playerDataId])
}
